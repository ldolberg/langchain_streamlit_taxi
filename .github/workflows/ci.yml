name: CI/CD

on:
  push:
    branches: ["main"]
    tags: ["v*", "release-*" ]
  pull_request:
    branches: ["main"]

jobs:
  lint-and-unit:
    name: Lint and unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies (app + dev)
        run: |
          python -m pip install -U pip
          pip install -r app/requirements.txt
          pip install flake8 pytest

      - name: Lint (flake8)
        run: |
          flake8 app --max-line-length=100

      - name: Unit tests
        run: |
          pytest -q

  docker-integration:
    name: Docker integration (DB + ETL smoke)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build app image (no push)
        run: |
          docker compose build app

      - name: Start Postgres
        run: |
          docker compose up -d db

      - name: Wait for DB healthy
        run: |
          for i in {1..60}; do
            if docker inspect --format='{{json .State.Health.Status}}' taxi_db | grep -q healthy; then
              echo "DB is healthy"; break; fi; sleep 2; done
          docker ps

      - name: Run ETL for a small sample
        run: |
          docker compose run --rm etl python etl/load_tlc.py --month 2019-01 --limit 2000

      - name: Verify row count > 0
        run: |
          docker exec taxi_db psql -U postgres -d taxi -c "SELECT COUNT(*) FROM yellow_trips;"

      - name: Teardown
        if: always()
        run: |
          docker compose down -v

  docker-publish:
    name: Build and publish Docker image
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/langchain-chat-gemini-mvp

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ./app
          file: ./app/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
